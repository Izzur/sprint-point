// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    name              String?
    class             String?
    level             Int?   @default(1)
    experience        Int?   @default(0)
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Levels
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    level             Int
    experience        Int
}

model quests
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    name              String
    description       String
    experience        Int
    level             Int
    type              String
    image             String
}

model account_quest
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    account_id        String
    quest_id          String
    completed         Boolean
    user              User     @relation(fields: [account_id], references: [id], onDelete: Cascade)
    quest             quests   @relation(fields: [quest_id], references: [id], onDelete: Cascade)
}

model account_item
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    account_id        String
    item_id           String
    quantity          Int
    user              User     @relation(fields: [account_id], references: [id], onDelete: Cascade)
    item              items    @relation(fields: [item_id], references: [id], onDelete: Cascade)
}

model items
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    name              String
    description       String
    image             String
    type              String
    level             Int
    experience        Int
}

model account_skill
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    account_id        String
    skill_id          String
    level             Int
    experience        Int
    user              User     @relation(fields: [account_id], references: [id], onDelete: Cascade)
    skill             skills   @relation(fields: [skill_id], references: [id], onDelete: Cascade)
}

model skills
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    name              String
    description       String
    image             String
    type              String
    level             Int
    experience        Int
}

model account_achievement
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    account_id        String
    achievement_id    String
    completed         Boolean
    user              User     @relation(fields: [account_id], references: [id], onDelete: Cascade)
    achievement       achievements   @relation(fields: [achievement_id], references: [id], onDelete: Cascade)
}

model achievements
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    name              String
    description       String
    image             String
    type              String
    level             Int
    experience        Int
}

model account_friend
{
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    account_id        String
    friend_id         String
    user              User     @relation(fields: [account_id], references: [id], onDelete: Cascade)
    friend            User     @relation(fields: [friend_id], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    todo          Todo[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Todo {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String
    done      Boolean  @default(false)
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
}

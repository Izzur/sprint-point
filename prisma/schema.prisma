generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id          String   @id
    name        String?
    description String?  @db.Text
    status      String?
    assigneeId  String?
    assignee    Profile? @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
    tags        String?
    teamId      String?
    url         String?
    listId      String?
    projectId   String?
    point       Float?
    sprintId    String?
    sprint      Sprint?  @relation(fields: [sprintId], references: [id], onDelete: Cascade)
    points      Point[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Point {
    id        String   @id @default(cuid())
    profileId String?
    profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
    taskId    String?
    task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
    type      String? // sprint, review, testing
    point     Float?  @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Profile {
    id        String   @id
    username  String?
    color     String?
    initials  String?
    email     String?
    avatar    String?
    teamId    String?
    team      Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
    tasks     Task[]
    points    Point[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Sprint {
    id        String   @id @default(cuid())
    name      String?  @unique
    tasks     Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id        String    @id @default(cuid())
    name      String?   @unique
    members   Profile[]
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}
